// <auto-generated />
using System;
using BackEndAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndAPI.Entities.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"));

                    b.Property<int>("BurnedCalories")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WorkoutProgramId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseId");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessCenter", b =>
                {
                    b.Property<int>("FitnessCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FitnessCenterId"));

                    b.Property<string>("FitnessCenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SportComplexId")
                        .HasColumnType("int");

                    b.HasKey("FitnessCenterId");

                    b.HasIndex("SportComplexId");

                    b.ToTable("FitnessCenters");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessMembershipBooking", b =>
                {
                    b.Property<int>("FitnessMembershipBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FitnessMembershipBookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FitnessMembershipMembershipId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("FitnessMembershipBookingId");

                    b.HasIndex("FitnessMembershipMembershipId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("FitnessMembershipBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessRoom", b =>
                {
                    b.Property<int>("FitnessRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FitnessRoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("FitnessCenterId")
                        .HasColumnType("int");

                    b.Property<string>("FitnessRoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FitnessRoomId");

                    b.HasIndex("FitnessCenterId");

                    b.ToTable("FitnessRooms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GoalType")
                        .HasColumnType("int");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupSchedule", b =>
                {
                    b.Property<int>("GroupScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupScheduleId"));

                    b.Property<DateTime>("DateOfDay")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("FitnessTrainerId")
                        .HasColumnType("int");

                    b.Property<int?>("FitnessTrainerTrainerId")
                        .HasColumnType("int");

                    b.Property<int>("GroupTrainingId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("GroupScheduleId");

                    b.HasIndex("FitnessTrainerId");

                    b.HasIndex("FitnessTrainerTrainerId");

                    b.HasIndex("GroupTrainingId");

                    b.ToTable("GroupSchedules");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupTraining", b =>
                {
                    b.Property<int>("GropTrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GropTrainingId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("FitnessRoomId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("GropTrainingId");

                    b.HasIndex("FitnessRoomId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("GroupTrainings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupTrainingBooking", b =>
                {
                    b.Property<int>("GroupTrainingBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupTrainingBookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("GroupTrainingBookingId");

                    b.HasIndex("GroupScheduleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("GroupTrainingBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Gym", b =>
                {
                    b.Property<int>("GymId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymId"));

                    b.Property<int>("GymCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("GymCenterId1")
                        .HasColumnType("int");

                    b.Property<string>("GymName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GymId");

                    b.HasIndex("GymCenterId");

                    b.HasIndex("GymCenterId1");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymCenter", b =>
                {
                    b.Property<int>("GymCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymCenterId"));

                    b.Property<string>("GymCenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GymMembership")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SportComplexId")
                        .HasColumnType("int");

                    b.HasKey("GymCenterId");

                    b.HasIndex("SportComplexId");

                    b.ToTable("GymCenters");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymMembershipBooking", b =>
                {
                    b.Property<int>("GymMembershipBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymMembershipBookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GymMembershipMembershipId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("GymMembershipBookingId");

                    b.HasIndex("GymMembershipMembershipId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("GymMembershipBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainerMembershipBooking", b =>
                {
                    b.Property<int>("GymTrainerMembershipBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GymTrainerMembershipBookingId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GymTrainerMembershipMembershipId")
                        .HasColumnType("int");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("GymTrainerMembershipBookingId");

                    b.HasIndex("GymTrainerMembershipMembershipId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("GymTrainerMembershipBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Membership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembershipDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MembershipName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("MembershipPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MembershipId");

                    b.ToTable("Memberships", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BackEndAPI.Entities.PersonalUserData", b =>
                {
                    b.Property<int>("PersonalUserDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalUserDataId"));

                    b.Property<int>("ActivityLevel")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId1")
                        .HasColumnType("int");

                    b.Property<double>("HeightCm")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("WeightKg")
                        .HasColumnType("float");

                    b.HasKey("PersonalUserDataId");

                    b.HasIndex("GoalId");

                    b.HasIndex("GoalId1");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalUserData");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("SpecializationDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("BackEndAPI.Entities.SportComplex", b =>
                {
                    b.Property<int>("SportComplexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SportComplexId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SportComplexName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SportComplexId");

                    b.ToTable("SportComplexes");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BackEndAPI.Entities.TrainerSpecialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("SpecializationId", "TrainerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSpecializations");
                });

            modelBuilder.Entity("BackEndAPI.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PersonalUserDataId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEndAPI.Entities.UserMeal", b =>
                {
                    b.Property<int>("UserMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMealId"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("PersonalUserDataId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("UserMealId");

                    b.HasIndex("PersonalUserDataId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserMeals");
                });

            modelBuilder.Entity("BackEndAPI.Entities.UserTargetCalculation", b =>
                {
                    b.Property<int>("UserTargetCalculationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTargetCalculationId"));

                    b.Property<decimal>("CalculatedNormalCalories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CalculatedTargetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CalculatedWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PersonalUserDataId")
                        .HasColumnType("int");

                    b.HasKey("UserTargetCalculationId");

                    b.HasIndex("PersonalUserDataId");

                    b.ToTable("UserTargetCalculations");
                });

            modelBuilder.Entity("BackEndAPI.Entities.WorkingTime", b =>
                {
                    b.Property<int>("WorkingTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingTimeId"));

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<int>("SportComplexId")
                        .HasColumnType("int");

                    b.HasKey("WorkingTimeId");

                    b.HasIndex("SportComplexId");

                    b.ToTable("WorkingTimes");
                });

            modelBuilder.Entity("BackEndAPI.Entities.WorkoutProgram", b =>
                {
                    b.Property<int>("WorkoutProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutProgramId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramGoalId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProgramType")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId1")
                        .HasColumnType("int");

                    b.HasKey("WorkoutProgramId");

                    b.HasIndex("GoalId");

                    b.HasIndex("ProgramGoalId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainerId1");

                    b.ToTable("WorkoutPrograms");
                });

            modelBuilder.Entity("FitnessTrainerSpecialization", b =>
                {
                    b.Property<int>("FitnessTrainersTrainerId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationsSpecializationId")
                        .HasColumnType("int");

                    b.HasKey("FitnessTrainersTrainerId", "SpecializationsSpecializationId");

                    b.HasIndex("SpecializationsSpecializationId");

                    b.ToTable("FitnessTrainerSpecialization");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessMembership", b =>
                {
                    b.HasBaseType("BackEndAPI.Entities.Membership");

                    b.Property<int>("FitnessCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("FitnessCenterId1")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipId1")
                        .HasColumnType("int");

                    b.HasIndex("FitnessCenterId");

                    b.HasIndex("FitnessCenterId1");

                    b.HasIndex("MembershipId1");

                    b.ToTable("FitnessMemberships", (string)null);
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymMembership", b =>
                {
                    b.HasBaseType("BackEndAPI.Entities.Membership");

                    b.Property<int>("GymCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipId1")
                        .HasColumnType("int");

                    b.HasIndex("GymCenterId");

                    b.HasIndex("MembershipId1");

                    b.ToTable("GymMemberships", (string)null);
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainerMembership", b =>
                {
                    b.HasBaseType("BackEndAPI.Entities.Membership");

                    b.Property<int?>("GymCenterId")
                        .HasColumnType("int");

                    b.Property<int>("GymTrainerId")
                        .HasColumnType("int");

                    b.Property<int?>("GymTrainerTrainerId")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipId1")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasIndex("GymCenterId");

                    b.HasIndex("GymTrainerId");

                    b.HasIndex("GymTrainerTrainerId");

                    b.HasIndex("MembershipId1");

                    b.ToTable("GymTrainerMemberships", (string)null);
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessTrainer", b =>
                {
                    b.HasBaseType("BackEndAPI.Entities.Trainer");

                    b.Property<int?>("TrainerId1")
                        .HasColumnType("int");

                    b.HasIndex("TrainerId1");

                    b.ToTable("FitnessTrainers", (string)null);
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainer", b =>
                {
                    b.HasBaseType("BackEndAPI.Entities.Trainer");

                    b.Property<int?>("TrainerId1")
                        .HasColumnType("int");

                    b.HasIndex("TrainerId1");

                    b.ToTable("GymTrainers", (string)null);
                });

            modelBuilder.Entity("BackEndAPI.Entities.Exercise", b =>
                {
                    b.HasOne("BackEndAPI.Entities.WorkoutProgram", "WorkoutProgram")
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessCenter", b =>
                {
                    b.HasOne("BackEndAPI.Entities.SportComplex", "SportComplex")
                        .WithMany("FitnessCenters")
                        .HasForeignKey("SportComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportComplex");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessMembershipBooking", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessMembership", null)
                        .WithMany("FitnessMembershipBookings")
                        .HasForeignKey("FitnessMembershipMembershipId");

                    b.HasOne("BackEndAPI.Entities.FitnessMembership", "FitnessMembership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", null)
                        .WithMany("FitnessMembershipBookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("FitnessMembership");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessRoom", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessCenter", "FitnessCenter")
                        .WithMany()
                        .HasForeignKey("FitnessCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessCenter");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupSchedule", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessTrainer", "FitnessTrainer")
                        .WithMany()
                        .HasForeignKey("FitnessTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.FitnessTrainer", null)
                        .WithMany("GroupSchedules")
                        .HasForeignKey("FitnessTrainerTrainerId");

                    b.HasOne("BackEndAPI.Entities.GroupTraining", "GroupTraining")
                        .WithMany("GroupSchedules")
                        .HasForeignKey("GroupTrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessTrainer");

                    b.Navigation("GroupTraining");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupTraining", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessRoom", "FitnessRoom")
                        .WithMany()
                        .HasForeignKey("FitnessRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FitnessRoom");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupTrainingBooking", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GroupSchedule", "GroupSchedule")
                        .WithMany()
                        .HasForeignKey("GroupScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", null)
                        .WithMany("GroupTrainingBookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("GroupSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Gym", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GymCenter", "GymCenter")
                        .WithMany()
                        .HasForeignKey("GymCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.GymCenter", null)
                        .WithMany("Gyms")
                        .HasForeignKey("GymCenterId1");

                    b.Navigation("GymCenter");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymCenter", b =>
                {
                    b.HasOne("BackEndAPI.Entities.SportComplex", "SportComplex")
                        .WithMany("GymCenters")
                        .HasForeignKey("SportComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportComplex");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymMembershipBooking", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GymMembership", null)
                        .WithMany("GymMembershipBookings")
                        .HasForeignKey("GymMembershipMembershipId");

                    b.HasOne("BackEndAPI.Entities.GymMembership", "GymMembership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", null)
                        .WithMany("GymMembershipBookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("GymMembership");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainerMembershipBooking", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GymTrainerMembership", null)
                        .WithMany("GymMembershipBooking")
                        .HasForeignKey("GymTrainerMembershipMembershipId");

                    b.HasOne("BackEndAPI.Entities.GymTrainerMembership", "GymTrainerMembership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.User", null)
                        .WithMany("GymTrainerMembershipBookings")
                        .HasForeignKey("UserId1");

                    b.Navigation("GymTrainerMembership");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndAPI.Entities.PersonalUserData", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Goal", null)
                        .WithMany("PersonalUsersData")
                        .HasForeignKey("GoalId1");

                    b.HasOne("BackEndAPI.Entities.User", "User")
                        .WithOne("PersonalUserData")
                        .HasForeignKey("BackEndAPI.Entities.PersonalUserData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEndAPI.Entities.TrainerSpecialization", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.FitnessTrainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BackEndAPI.Entities.User", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BackEndAPI.Entities.UserMeal", b =>
                {
                    b.HasOne("BackEndAPI.Entities.PersonalUserData", null)
                        .WithMany("UserMeals")
                        .HasForeignKey("PersonalUserDataId");

                    b.HasOne("BackEndAPI.Entities.PersonalUserData", "PersonalUserData")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalUserData");
                });

            modelBuilder.Entity("BackEndAPI.Entities.UserTargetCalculation", b =>
                {
                    b.HasOne("BackEndAPI.Entities.PersonalUserData", "PersonalUserData")
                        .WithMany("UserTargetCalculations")
                        .HasForeignKey("PersonalUserDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalUserData");
                });

            modelBuilder.Entity("BackEndAPI.Entities.WorkingTime", b =>
                {
                    b.HasOne("BackEndAPI.Entities.SportComplex", "SportComplex")
                        .WithMany("WorkingTimes")
                        .HasForeignKey("SportComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportComplex");
                });

            modelBuilder.Entity("BackEndAPI.Entities.WorkoutProgram", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Goal", null)
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("GoalId");

                    b.HasOne("BackEndAPI.Entities.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("ProgramGoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Trainer", null)
                        .WithMany("WorkoutPrograms")
                        .HasForeignKey("TrainerId1");

                    b.Navigation("Goal");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FitnessTrainerSpecialization", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessTrainer", null)
                        .WithMany()
                        .HasForeignKey("FitnessTrainersTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessMembership", b =>
                {
                    b.HasOne("BackEndAPI.Entities.FitnessCenter", "FitnessCenter")
                        .WithMany("FitnessMemberships")
                        .HasForeignKey("FitnessCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.FitnessCenter", null)
                        .WithMany("FitnessRooms")
                        .HasForeignKey("FitnessCenterId1");

                    b.HasOne("BackEndAPI.Entities.Membership", null)
                        .WithOne()
                        .HasForeignKey("BackEndAPI.Entities.FitnessMembership", "MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId1");

                    b.Navigation("FitnessCenter");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymMembership", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GymCenter", "GymCenter")
                        .WithMany("GymMemberships")
                        .HasForeignKey("GymCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", null)
                        .WithOne()
                        .HasForeignKey("BackEndAPI.Entities.GymMembership", "MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId1");

                    b.Navigation("GymCenter");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainerMembership", b =>
                {
                    b.HasOne("BackEndAPI.Entities.GymCenter", "GymCenter")
                        .WithMany("GymTrainerMemberships")
                        .HasForeignKey("GymCenterId");

                    b.HasOne("BackEndAPI.Entities.GymTrainer", "GymTrainer")
                        .WithMany()
                        .HasForeignKey("GymTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.GymTrainer", null)
                        .WithMany("GymTrainerMemberships")
                        .HasForeignKey("GymTrainerTrainerId");

                    b.HasOne("BackEndAPI.Entities.Membership", null)
                        .WithOne()
                        .HasForeignKey("BackEndAPI.Entities.GymTrainerMembership", "MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId1");

                    b.Navigation("GymCenter");

                    b.Navigation("GymTrainer");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessTrainer", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Trainer", null)
                        .WithOne()
                        .HasForeignKey("BackEndAPI.Entities.FitnessTrainer", "TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId1");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainer", b =>
                {
                    b.HasOne("BackEndAPI.Entities.Trainer", null)
                        .WithOne()
                        .HasForeignKey("BackEndAPI.Entities.GymTrainer", "TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndAPI.Entities.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId1");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessCenter", b =>
                {
                    b.Navigation("FitnessMemberships");

                    b.Navigation("FitnessRooms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Goal", b =>
                {
                    b.Navigation("PersonalUsersData");

                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GroupTraining", b =>
                {
                    b.Navigation("GroupSchedules");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymCenter", b =>
                {
                    b.Navigation("GymMemberships");

                    b.Navigation("GymTrainerMemberships");

                    b.Navigation("Gyms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.PersonalUserData", b =>
                {
                    b.Navigation("UserMeals");

                    b.Navigation("UserTargetCalculations");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BackEndAPI.Entities.SportComplex", b =>
                {
                    b.Navigation("FitnessCenters");

                    b.Navigation("GymCenters");

                    b.Navigation("WorkingTimes");
                });

            modelBuilder.Entity("BackEndAPI.Entities.Trainer", b =>
                {
                    b.Navigation("WorkoutPrograms");
                });

            modelBuilder.Entity("BackEndAPI.Entities.User", b =>
                {
                    b.Navigation("FitnessMembershipBookings");

                    b.Navigation("GroupTrainingBookings");

                    b.Navigation("GymMembershipBookings");

                    b.Navigation("GymTrainerMembershipBookings");

                    b.Navigation("PersonalUserData");
                });

            modelBuilder.Entity("BackEndAPI.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessMembership", b =>
                {
                    b.Navigation("FitnessMembershipBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymMembership", b =>
                {
                    b.Navigation("GymMembershipBookings");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainerMembership", b =>
                {
                    b.Navigation("GymMembershipBooking");
                });

            modelBuilder.Entity("BackEndAPI.Entities.FitnessTrainer", b =>
                {
                    b.Navigation("GroupSchedules");
                });

            modelBuilder.Entity("BackEndAPI.Entities.GymTrainer", b =>
                {
                    b.Navigation("GymTrainerMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
